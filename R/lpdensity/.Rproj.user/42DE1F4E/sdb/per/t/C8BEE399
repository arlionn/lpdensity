{
    "collab_server" : "",
    "contents" : "################################################################################\n#' @title Local Polynomial Density Plot with Robust Confidence Intervals\n#'\n#' @description \\code{lpdensity.plot} plots estimated density/derivatives. This command\n#'   can also be used to plot smoothed distribution function. See\n#'   \\href{http://www-personal.umich.edu/~cattaneo/papers/Cattaneo-Jansson-Ma_2017_lpdensity.pdf}{Cattaneo, Jansson and Ma (2017b)} for more implementation details and illustrations.\n#'\n#'   Companion command: \\code{\\link{lpdensity}} for local polynomial based density\n#'   and derivatives estimation.\n#'\n#'   For more details, and related Stata and R packages useful for empirical analysis,\n#'   visit \\url{https://sites.google.com/site/nppackages/}.\n#'\n#' @param ... Objects returned by \\code{\\link{lpdensity}}.\n#' @param alpha Numeric scalar between 0 and 1, the significance level for plotting\n#'   confidence regions. If more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param type String, one of \\code{\"line\"} (default), \\code{\"points\"} or \\code{\"both\"}, how\n#'   the point estimates are plotted. If more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param CItype String, one of \\code{\"region\"} (shaded region, default), \\code{\"line\"} (dashed lines),\n#'   \\code{\"ebar\"} (error bars), \\code{\"all\"} (all of the previous) or \\code{\"none\"} (no confidence region),\n#'   how the confidence region should be plotted. If more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param title,xlabel,ylabel Strings, title of the plot and labels for x- and y-axis.\n#' @param lty Line type for point estimates, only effective if \\code{type} is \\code{\"line\"} or\n#'   \\code{\"both\"}. \\code{1} for solid line, \\code{2} for dashed line, \\code{3} for dotted line.\n#'   For other options, see the instructions for \\code{\\link{ggplot2}} or \\code{\\link{par}}. If\n#'   more than one is provided, they will be applied to data series accordingly.\n#' @param lwd Line width for point estimates, only effective if \\code{type} is \\code{\"line\"} or\n#'   \\code{\"both\"}. Should be strictly positive. For other options, see the instructions for\n#'   \\code{\\link{ggplot2}} or \\code{\\link{par}}. If more than one is provided, they will be applied\n#'   to data series accordingly.\n#' @param lcol Line color for point estimates, only effective if \\code{type} is \\code{\"line\"} or\n#'   \\code{\"both\"}. \\code{1} for black, \\code{2} for red, \\code{3} for green, \\code{4} for blue.\n#'   For other options, see the instructions for \\code{\\link{ggplot2}} or \\code{\\link{par}}. If\n#'   more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param pty Scatter plot type for point estimates, only effective if \\code{type} is \\code{\"points\"} or\n#'   \\code{\"both\"}. For options, see the instructions for \\code{\\link{ggplot2}} or \\code{\\link{par}}. If\n#'   more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param pwd Scatter plot size for point estimates, only effective if \\code{type} is \\code{\"points\"} or\n#'   \\code{\"both\"}. Should be strictly positive. If more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param pcol Scatter plot color for point estimates, only effective if \\code{type} is \\code{\"points\"} or\n#'   \\code{\"both\"}. \\code{1} for black, \\code{2} for red, \\code{3}\n#'   for green, \\code{4} for blue.\n#'   For other options, see the instructions for \\code{\\link{ggplot2}} or \\code{\\link{par}}. If\n#'   more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param CIshade Numeric, opaqueness of the confidence region, should be between 0 (transparent) and\n#'   1. Default is 0.2. If more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param CIcol color for confidence region. \\code{1} for black, \\code{2} for red, \\code{3}\n#'   for green, \\code{4} for blue.\n#'   For other options, see the instructions for \\code{\\link{ggplot2}} or \\code{\\link{par}}. If\n#'   more than one is provided, they will be applied to data series\n#'   accordingly.\n#' @param legendTitle String, title of legend.\n#' @param legendGroups String Vector, group names used in legend.\n#'\n#' @return\n#' \\item{}{A stadnard \\code{ggplot} object is returned, hence can be used for further customization.}\n#'\n#' @author\n#' Matias D. Cattaneo, University of Michigan. \\email{cattaneo@umich.edu}.\n#'\n#' Michael Jansson, University of California, Berkeley. \\email{mjansson@econ.berkeley.edu}.\n#'\n#' Xinwei Ma (maintainer), University of Michigan. \\email{xinweima@umich.edu}.\n#'\n#' @references\n#' M. D. Cattaneo, M. Jansson and X. Ma. (2017a). \\href{http://www-personal.umich.edu/~cattaneo/papers/Cattaneo-Jansson-Ma_2017_LocPolDensity.pdf}{Simple Local Polynomial Density Estimators}. Working Paper, University of Michigan.\n#'\n#' M. D. Cattaneo, M. Jansson and X. Ma. (2017b). \\href{http://www-personal.umich.edu/~cattaneo/papers/Cattaneo-Jansson-Ma_2017_lpdensity.pdf}{\\code{lpdensity}: Local Polynomial Density Estimation and Inference}. Working Paper, University of Michigan.\n#'\n#' @seealso \\code{\\link{lpdensity}}\n#'\n#' @examples\n#' set.seed(42); X <- rnorm(2000)\n#'\n#' X <- X - 0.5; X[X>0] <- X[X>0] * 2\n#' est1 <- lpdensity(data = X[X<=0], grid = seq(-2.5, 0, 0.05), bwselect = \"IMSE\",\n#'   scale = sum(X<=0)/length(X))\n#' est2 <- lpdensity(data = X[X>0],  grid = seq(0, 2, 0.05), bwselect = \"IMSE\",\n#'   scale = sum(X>0)/length(X))\n#' lpdensity.plot(est1, est2, legendTitle=\"My Plot\", legendGroups=c(\"Left\", \"Right\"))\n#'\n#' @export\nlpdensity.plot <- function(..., alpha=NULL, type=NULL, CItype=NULL,\n                           title=\"\", xlabel=\"\", ylabel=\"\",\n                           lty=NULL, lwd=NULL, lcol=NULL, pty=NULL, pwd=NULL, pcol=NULL,\n                           CIshade=NULL, CIcol=NULL, legendTitle=NULL, legendGroups=NULL) {\n\n  ########################################\n  # check how many series are passed in\n  ########################################\n\n  x <- list(...)\n  nfig <- length(x)\n  if (nfig == 0) stop(\"Nothing to plot.\\n\")\n\n  ########################################\n  # error handling\n  ########################################\n  # alpha\n  if (length(alpha) == 0) {\n    alpha <- rep(0.05, nfig)\n  } else if (!all(alpha>0 & alpha<1)) {\n    stop(\"Significance level incorrectly specified.\\n\")\n  } else {\n    alpha <- rep(alpha, length.out=nfig)\n  }\n\n  # plot type\n  if (length(type) == 0) {\n    type <- rep(\"line\", nfig)\n  } else {\n    if (!all(type%in%c(\"line\", \"points\", \"both\"))) {\n      stop(\"Plotting type incorrectly specified.\\n\")\n    }\n    type <- rep(type, length.out=nfig)\n  }\n\n  # CI type\n  if (length(CItype) == 0) {\n    CItype <- rep(\"region\", nfig)\n  } else {\n    if (!all(CItype%in%c(\"region\", \"line\", \"ebar\", \"all\", \"none\"))) {\n      stop(\"Confidence interval type incorrectly specified.\\n\")\n    }\n    CItype <- rep(CItype, length.out=nfig)\n  }\n\n  # line style, line width, line color\n  if (length(lty) == 0) {\n    lty <- rep(1, nfig)\n  } else {\n    lty <- rep(lty, length.out=nfig)\n  }\n  if (length(lwd) == 0) {\n    lwd <- rep(0.5, nfig)\n  } else {\n    lwd <- rep(lwd, length.out=nfig)\n  }\n  if (length(lcol) == 0) {\n    lcol <- 1:nfig\n  } else {\n    lcol <- rep(lcol, length.out=nfig)\n  }\n\n  # point style, point width, point color\n  if (length(pty) == 0) {\n    pty <- rep(1, nfig)\n  } else {\n    pty <- rep(pty, length.out=nfig)\n  }\n  if (length(pwd) == 0) {\n    pwd <- rep(1, nfig)\n  } else {\n    pwd <- rep(pwd, length.out=nfig)\n  }\n  if (length(pcol) == 0) {\n    pcol <- lcol\n  } else {\n    pcol <- rep(pcol, length.out=nfig)\n  }\n\n  # CI shade, CI color\n  if (length(CIshade) == 0) {\n    CIshade <- rep(0.2, nfig)\n  } else {\n    CIshade <- rep(CIshade, length.out=nfig)\n  }\n  if (length(CIcol) == 0) {\n    CIcol <- lcol\n  } else {\n    CIcol <- rep(CIcol, length.out=nfig)\n  }\n\n  # legend\n  # New in v0.2.1 to handle legend\n  if (length(legendTitle) == 0) {\n    legendTitle <- \"\"\n  } else {\n    legendTitle <- legendTitle[1]\n  }\n  if (length(legendGroups) > 0) {\n    legendGroups <- rep(legendGroups, length.out=nfig)\n    legend_default <- FALSE\n  } else {\n    legend_default <- TRUE\n  }\n\n  ########################################\n  # initializing plot\n  ########################################\n  temp_plot <- ggplot() + theme_bw() #+ theme(legend.position=\"none\")\n\n  CI_l <- CI_r <- f_p <- grid <- Sname <- NULL\n\n  ########################################\n  # looping over input models\n  ########################################\n  ### all colors\n  col_all <- lty_all <- pty_all <- c()\n  for (i in 1:nfig) {\n    data_x <- data.frame(x[[i]]$Estimate[, c(\"grid\", \"f_p\", \"f_q\", \"se_p\", \"se_q\")])\n    z_val <- qnorm(1 - alpha[i]/2)\n    if (x[[i]]$opt$q == x[[i]]$opt$p) {\n      data_x$f_q <- data_x$f_p; data_x$se_q <- data_x$se_p\n    }\n    data_x$CI_l <- data_x$f_q - z_val * data_x$se_q\n    data_x$CI_r <- data_x$f_q + z_val * data_x$se_q\n\n    # New in v0.2.1 to handle legend\n    if (legend_default) {\n      data_x$Sname <- paste(\"Series\", i, sep=\" \")\n      legendGroups <- c(legendGroups, data_x$Sname)\n    } else {\n      data_x$Sname <- legendGroups[i]\n    }\n\n    ########################################\n    # add CI regions to the plot\n    if (CItype[i]%in%c(\"region\", \"all\"))\n      temp_plot <- temp_plot + geom_ribbon(data=data_x, aes(x=grid, ymin=CI_l, ymax=CI_r), alpha=CIshade[i], fill=CIcol[i])\n\n    ########################################\n    # add CI lines to the plot\n    if (CItype[i]%in%c(\"line\", \"all\"))\n      temp_plot <- temp_plot + geom_line(data=data_x, aes(x=grid, y=CI_l), linetype=2, alpha=CIshade[i], col=CIcol[i]) +\n      geom_line(data=data_x, aes(x=grid, y=CI_r), linetype=2, alpha=CIshade[i], col=CIcol[i])\n\n    ########################################\n    # add error bars to the plot\n    if (CItype[i]%in%c(\"ebar\", \"all\"))\n      temp_plot <- temp_plot + geom_errorbar(data=data_x, aes(x=grid, ymin=CI_l, ymax=CI_r), alpha=CIshade[i], col=CIcol[i], linetype=1)\n\n    ########################################\n    # add lines to the plot\n    if (type[i]%in%c(\"line\", \"both\")) {\n      temp_plot <- temp_plot + geom_line(data=data_x, aes(x=grid, y=f_p, colour=Sname, linetype=Sname), size=lwd[i])\n    }\n\n    ########################################\n    # add points to the plot\n    if (type[i]%in%c(\"points\", \"both\")) {\n      temp_plot <- temp_plot + geom_point(data=data_x, aes(x=grid, y=f_p, colour=Sname, shape=Sname), size=pwd[i])\n    }\n\n    if (type[i] == \"line\") {\n      col_all <- c(col_all, lcol[i])\n      lty_all <- c(lty_all, lty[i])\n      pty_all <- c(pty_all, NA)\n    } else if (type[i] == \"both\") {\n      col_all <- c(col_all, lcol[i])\n      lty_all <- c(lty_all, lty[i])\n      pty_all <- c(pty_all, pty[i])\n    } else {\n      col_all <- c(col_all, pcol[i])\n      lty_all <- c(lty_all, NA)\n      pty_all <- c(pty_all, pty[i])\n    }\n  }\n\n  ########################################\n  # change color, line type and point shape back, and customize legend\n  ########################################\n  # New in v0.2.1 to handle legend\n  index <- sort.int(legendGroups, index.return=TRUE)$ix\n  temp_plot <- temp_plot + scale_color_manual(values = col_all[index]) +\n    scale_linetype_manual(values = lty_all[index]) +\n    scale_shape_manual(values = pty_all[index]) +\n    guides(colour=guide_legend(title=legendTitle)) +\n    guides(linetype=guide_legend(title=legendTitle)) +\n    guides(shape=guide_legend(title=legendTitle))\n\n  ########################################\n  # add title, x and y labs\n  ########################################\n  temp_plot <- temp_plot + labs(x=xlabel, y=ylabel) + ggtitle(title)\n\n  ########################################\n  # return the plot\n  ########################################\n  return (temp_plot)\n}\n",
    "created" : 1499456647944.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4282314864",
    "id" : "C8BEE399",
    "lastKnownWriteTime" : 1499456681,
    "last_content_update" : 1499456681269,
    "path" : "~/Dropbox/0_Research/2017_lp_density/Package_R_lpdensity/lpdensity/R/lpdensity.plot.R",
    "project_path" : "R/lpdensity.plot.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}